{"version":3,"sources":["keditor-component-googlemap-0.0.0.js"],"names":["$","window","KEditor","keditor","flog","log","components","init","contentArea","container","component","this","callWhenGoogleMapReady","initKGoogleMap","getContent","componentContent","children","find","remove","html","settingEnabled","settingTitle","initSettingForm","form","self","ajax","url","type","dataType","success","resp","getSettingComponent","initAutocomplete","mapTypes","on","hide","filter","value","show","iframe","kgooglemap","attr","makeGoogleMapFresh","src","length","alert","removeClass","addClass","callback","apiKey","google","maps","places","call","getScriptOnce","input","setTimeout","trigger","event","keyCode","e","map","data","showSettingForm","maptype","place","ratio","hasClass","prop","val","mapDiv","Map","zoom","mapTypeId","searchBox","SearchBox","addListener","setBounds","getBounds","markers","getPlaces","forEach","marker","setMap","bounds","LatLngBounds","geometry","console","icon","size","Size","origin","Point","anchor","scaledSize","push","Marker","title","name","position","location","viewport","union","extend","fitBounds","jQuery"],"mappings":"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","file":"keditor-component-googlemap-0.0.0.min.js","sourcesContent":["(function ($, window) {\r\n    var KEditor = $.keditor;\r\n    var flog = KEditor.log;\r\n    \r\n    KEditor.components['googlemap'] = {\r\n        init: function (contentArea, container, component, keditor) {\r\n            flog('init \"googlemap\" component', component);\r\n            \r\n            this.callWhenGoogleMapReady(function () {\r\n                initKGoogleMap(component);\r\n            });\r\n        },\r\n        \r\n        getContent: function (component, keditor) {\r\n            flog('getContent \"googlemap\" component', component);\r\n            \r\n            var componentContent = component.children('.keditor-component-content');\r\n            componentContent.find('.googlemap-cover').remove();\r\n            component.find('.kgooglemap').html('');\r\n            \r\n            return componentContent.html();\r\n        },\r\n        \r\n        settingEnabled: true,\r\n        \r\n        settingTitle: 'Google Map Settings',\r\n        \r\n        initSettingForm: function (form, keditor) {\r\n            flog('init \"googlemap\" settings', form);\r\n            var self = this;\r\n            \r\n            return $.ajax({\r\n                url: '/theme/apps/keditor-lib/componentGoogleMapSettings.html',\r\n                type: 'get',\r\n                dataType: 'HTML',\r\n                success: function (resp) {\r\n                    form.html(resp);\r\n                    \r\n                    self.callWhenGoogleMapReady(function () {\r\n                        var component = keditor.getSettingComponent();\r\n                        self.initAutocomplete(component, form);\r\n                    });\r\n                    \r\n                    var mapTypes = form.find('.map-type');\r\n                    form.find('.mapType').on('click', function () {\r\n                        mapTypes.hide().filter('.' + this.value).show();\r\n                        \r\n                        var component = keditor.getSettingComponent();\r\n                        var iframe = component.find('iframe');\r\n                        var kgooglemap = component.find('.kgooglemap');\r\n                        component.attr('data-maptype', this.value);\r\n                        \r\n                        iframe[this.value === 'manually' ? 'hide' : 'show']();\r\n                        kgooglemap[this.value === 'manually' ? 'show' : 'hide']();\r\n                        \r\n                        if (this.value === 'manually') {\r\n                            self.makeGoogleMapFresh(form, component);\r\n                        }\r\n                    });\r\n                    \r\n                    form.find('[name=mapEmbedCode]').on('change', function () {\r\n                        var iframe = $(this.value);\r\n                        var src = iframe.attr('src');\r\n                        if (iframe.length > 0 && src && src.length > 0) {\r\n                            keditor.getSettingComponent().find('.embed-responsive-item').attr('src', src);\r\n                        } else {\r\n                            alert('Your Google Map embed code is invalid!');\r\n                        }\r\n                    });\r\n                    \r\n                    form.find('[name=mapRatio]').on('click', function () {\r\n                        var component = keditor.getSettingComponent();\r\n                        \r\n                        component.find('.embed-responsive').removeClass('embed-responsive-4by3 embed-responsive-16by9').addClass('embed-responsive-' + this.value);\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        \r\n        callWhenGoogleMapReady: function (callback) {\r\n            var self = this;\r\n            var apiKey = 'AIzaSyBUcuZxwpBXCPztG7ot-rITXJbycPuS7gs';\r\n            var url = 'https://maps.googleapis.com/maps/api/js?key=' + apiKey + '&libraries=places';\r\n            \r\n            if (window.google && window.google.maps && google.maps.places) {\r\n                callback.call(self);\r\n            } else {\r\n                $.getScriptOnce(url, function () {\r\n                    callback.call(self);\r\n                });\r\n            }\r\n        },\r\n        \r\n        makeGoogleMapFresh: function (form, component) {\r\n            var input = form.find('[name=mapAddress]')[0];\r\n            \r\n            setTimeout(function () {\r\n                try {\r\n                    $(input).trigger('focus');\r\n                    // google.maps.event.trigger(input, 'focus');\r\n                    google.maps.event.trigger(input, 'keydown', {\r\n                        keyCode: 13\r\n                    });\r\n                } catch (e) {\r\n                    flog('===================', e);\r\n                }\r\n            }, 1000);\r\n            \r\n            var map = component.find('.kgooglemap').data('map');\r\n            setTimeout(function () {\r\n                google.maps.event.trigger(map, \"resize\");\r\n            }, 100);\r\n        },\r\n        \r\n        showSettingForm: function (form, component, keditor) {\r\n            var self = this;\r\n            \r\n            self.callWhenGoogleMapReady(function () {\r\n                var maptype = component.attr('data-maptype') || 'embed';\r\n                var place = component.attr('data-place');\r\n                \r\n                var ratio = component.find('.embed-responsive').hasClass('embed-responsive-16by9') ? '16by9' : '4by3';\r\n                form.find('.mapRatio[value=' + ratio + ']').prop('checked', true);\r\n                form.find('.mapType[value=' + maptype + ']').prop('checked', true);\r\n                \r\n                var src = component.find('iframe').attr('src');\r\n                var iframe = '<iframe class=\"embed-responsive-item\" src=\"' + src + '\"></iframe>';\r\n                if (!place) {\r\n                    place = 'Hanoi, Vietnam';\r\n                }\r\n                form.find('[name=mapAddress]').val(place);\r\n                form.find('[name=mapEmbedCode]').val(iframe);\r\n                \r\n                form.find('.map-type').hide().filter('.' + maptype).show();\r\n                \r\n                if (!component.find('.kgooglemap').data('map')) {\r\n                    self.initAutocomplete(component, form);\r\n                    \r\n                    if (maptype === 'manually') {\r\n                        self.makeGoogleMapFresh(form, component);\r\n                    }\r\n                } else {\r\n                    if (maptype === 'manually') {\r\n                        self.makeGoogleMapFresh(form, component);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        \r\n        initAutocomplete: function (component, form) {\r\n            if (component.find('.kgooglemap').data('map')) {\r\n                this.makeGoogleMapFresh(form, component);\r\n            } else {\r\n                var mapDiv = component.find('.kgooglemap')[0];\r\n                var map = new google.maps.Map(mapDiv, {\r\n                    zoom: 13,\r\n                    mapTypeId: 'roadmap'\r\n                });\r\n                \r\n                // Create the search box and link it to the UI element.\r\n                var input = form.find('[name=mapAddress]')[0];\r\n                var searchBox = new google.maps.places.SearchBox(input);\r\n                \r\n                // Bias the SearchBox results towards current map's viewport.\r\n                map.addListener('bounds_changed', function () {\r\n                    searchBox.setBounds(map.getBounds());\r\n                });\r\n                \r\n                var markers = [];\r\n                searchBox.addListener('places_changed', function () {\r\n                    var places = searchBox.getPlaces();\r\n                    \r\n                    if (places.length == 0) {\r\n                        return;\r\n                    }\r\n                    \r\n                    // Clear out the old markers.\r\n                    markers.forEach(function (marker) {\r\n                        marker.setMap(null);\r\n                    });\r\n                    markers = [];\r\n                    \r\n                    // For each place, get the icon, name and location.\r\n                    var bounds = new google.maps.LatLngBounds();\r\n                    places.forEach(function (place) {\r\n                        if (!place.geometry) {\r\n                            console.log(\"Returned place contains no geometry\");\r\n                            return;\r\n                        }\r\n                        \r\n                        var icon = {\r\n                            url: place.icon,\r\n                            size: new google.maps.Size(71, 71),\r\n                            origin: new google.maps.Point(0, 0),\r\n                            anchor: new google.maps.Point(17, 34),\r\n                            scaledSize: new google.maps.Size(25, 25)\r\n                        };\r\n                        \r\n                        // Create a marker for each place.\r\n                        markers.push(new google.maps.Marker({\r\n                            map: map,\r\n                            icon: icon,\r\n                            title: place.name,\r\n                            position: place.geometry.location\r\n                        }));\r\n                        \r\n                        if (place.geometry.viewport) {\r\n                            // Only geocodes have viewport.\r\n                            bounds.union(place.geometry.viewport);\r\n                        } else {\r\n                            bounds.extend(place.geometry.location);\r\n                        }\r\n                    });\r\n                    map.fitBounds(bounds);\r\n                    component.attr('data-place', input.value);\r\n                });\r\n                \r\n                component.find('.kgooglemap').data('map', map);\r\n            }\r\n        }\r\n    };\r\n    \r\n})(jQuery, window);\r\n"]}