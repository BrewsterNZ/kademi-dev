{"version":3,"sources":["keditor-component-jumbotron-0.0.0.js"],"names":["$","KEditor","keditor","contentEditor","flog","log","components","settingEnabled","settingTitle","init","contentArea","container","component","options","componentContent","children","prop","on","e","onComponentChanged","call","onContainerChanged","onContentChanged","editor","ckeditor","ckeditorOptions","onComponentReady","getContent","find","id","attr","CKEDITOR","instances","getData","html","initSettingForm","form","ajax","url","type","dataType","success","resp","comp","getSettingComponent","this","checked","buttonColorPicker","initSimpleColorPicker","color","css","paddingSettings","paddingValue","value","paddingProp","trim","isNaN","marginSettings","showSettingForm","val","trigger","each","replace","hasClass","destroy","jQuery"],"mappings":"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","file":"keditor-component-jumbotron-0.0.0.min.js","sourcesContent":["(function ($) {\r\n    var KEditor = $.keditor;\r\n    var contentEditor = $.contentEditor;\r\n    var flog = KEditor.log;\r\n    \r\n    KEditor.components['jumbotron'] = {\r\n        settingEnabled: true,\r\n        \r\n        settingTitle: 'Jumbotron Settings',\r\n        init: function (contentArea, container, component, keditor) {\r\n            var self = this;\r\n            var options = keditor.options;\r\n            \r\n            var componentContent = component.children('.keditor-component-content');\r\n            componentContent.prop('contenteditable', true);\r\n            \r\n            componentContent.on('input', function (e) {\r\n                if (typeof options.onComponentChanged === 'function') {\r\n                    options.onComponentChanged.call(keditor, e, component, contentArea);\r\n                }\r\n                \r\n                if (typeof options.onContainerChanged === 'function') {\r\n                    options.onContainerChanged.call(keditor, e, container, contentArea);\r\n                }\r\n                \r\n                if (typeof options.onContentChanged === 'function') {\r\n                    options.onContentChanged.call(keditor, e, contentArea);\r\n                }\r\n            });\r\n            \r\n            var editor = componentContent.ckeditor(options.ckeditorOptions).editor;\r\n            editor.on('instanceReady', function () {\r\n                flog('CKEditor is ready', component);\r\n                \r\n                if (typeof options.onComponentReady === 'function') {\r\n                    options.onComponentReady.call(contentArea, component, editor);\r\n                }\r\n            });\r\n        },\r\n        \r\n        getContent: function (component, keditor) {\r\n            flog('getContent \"jumbotron\" component', component);\r\n            \r\n            var componentContent = component.find('.keditor-component-content');\r\n            var id = componentContent.attr('id');\r\n            var editor = CKEDITOR.instances[id];\r\n            if (editor) {\r\n                return editor.getData();\r\n            } else {\r\n                return componentContent.html();\r\n            }\r\n        },\r\n        \r\n        initSettingForm: function (form, keditor) {\r\n            flog('init \"jumbotron\" settings', form);\r\n            \r\n            return $.ajax({\r\n                url: '/theme/apps/keditor-lib/componentJumbotronSettings.html',\r\n                type: 'get',\r\n                dataType: 'HTML',\r\n                success: function (resp) {\r\n                    form.html(resp);\r\n                    \r\n                    form.find('.chk-inverse').on('click', function () {\r\n                        var comp = keditor.getSettingComponent();\r\n                        comp.find('.jumbotron')[this.checked ? 'addClass' : 'removeClass']('jumbotron-inverse');\r\n                    });\r\n                    \r\n                    var buttonColorPicker = form.find('.button-color-picker');\r\n                    contentEditor.initSimpleColorPicker(buttonColorPicker, function (color) {\r\n                        var comp = keditor.getSettingComponent();\r\n                        comp.find('.jumbotron').css('background-color', color);\r\n                        comp.attr('data-bgcolor', color);\r\n                    });\r\n                    \r\n                    var paddingSettings = form.find('.paddingSettings');\r\n                    paddingSettings.on('change', function () {\r\n                        var paddingValue = this.value || '';\r\n                        var component = keditor.getSettingComponent();\r\n                        var paddingProp = $(this).attr('name');\r\n                        if (paddingValue.trim() === '') {\r\n                            component.find('.jumbotron').css(paddingProp, '');\r\n                        } else {\r\n                            if (isNaN(paddingValue)) {\r\n                                paddingValue = 0;\r\n                                this.value = paddingValue;\r\n                            }\r\n                            component.find('.jumbotron').css(paddingProp, paddingValue + 'px');\r\n                        }\r\n                    });\r\n                    \r\n                    var marginSettings = form.find('.marginSettings');\r\n                    marginSettings.on('change', function () {\r\n                        var paddingValue = this.value || '';\r\n                        var component = keditor.getSettingComponent();\r\n                        var paddingProp = $(this).attr('name');\r\n                        if (paddingValue.trim() === '') {\r\n                            component.find('.jumbotron').css(paddingProp, '');\r\n                        } else {\r\n                            if (isNaN(paddingValue)) {\r\n                                paddingValue = 0;\r\n                                this.value = paddingValue;\r\n                            }\r\n                            component.find('.jumbotron').css(paddingProp, paddingValue + 'px');\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        \r\n        showSettingForm: function (form, component, keditor) {\r\n            flog('showSettingForm \"jumbotron\" component', component);\r\n            form.find('[name=button-color]').val(component.attr('data-bgcolor')).trigger('update');\r\n            form.find('.paddingSettings').each(function () {\r\n                $(this).val(component.find('.jumbotron').css($(this).attr('name')).replace('px', ''));\r\n            });\r\n            form.find('.marginSettings').each(function () {\r\n                $(this).val(component.find('.jumbotron').css($(this).attr('name')).replace('px', ''));\r\n            });\r\n            form.find('[name=showButton][value=false]').prop('checked', component.find('a').hasClass('hide'));\r\n            form.find('.chk-inverse').prop('checked', component.find('.jumbotron').hasClass('jumbotron-inverse'));\r\n        },\r\n        \r\n        destroy: function (component, keditor) {\r\n            flog('destroy \"text\" component', component);\r\n            \r\n            var id = component.find('.keditor-component-content').attr('id');\r\n            var editor = CKEDITOR.instances[id];\r\n            if (editor) {\r\n                editor.destroy();\r\n            }\r\n        }\r\n    };\r\n    \r\n})(jQuery);\r\n\r\n"]}