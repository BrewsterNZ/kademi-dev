{"version":3,"sources":["keditor-component-jumbotron-0.0.0.js"],"names":["$","KEditor","keditor","contentEditor","flog","log","components","settingEnabled","settingTitle","init","contentArea","container","component","options","componentContent","children","prop","on","e","onComponentChanged","call","onContainerChanged","onContentChanged","editor","ckeditor","ckeditorOptions","onComponentReady","getContent","find","id","attr","CKEDITOR","instances","getData","html","initSettingForm","form","ajax","url","type","dataType","success","resp","comp","getSettingComponent","this","checked","value","css","buttonColorPicker","initSimpleColorPicker","color","paddingSettings","paddingValue","paddingProp","trim","isNaN","marginSettings","showSettingForm","val","trigger","each","replace","hasClass","destroy","jQuery"],"mappings":"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","file":"keditor-component-jumbotron-0.0.0.min.js","sourcesContent":["/**\n * KEditor Jumbotron Component\n * @copyright: Kademi (http://kademi.co)\n * @author: Kademi (http://kademi.co)\n * @version: @{version}\n * @dependencies: $, $.fn.draggable, $.fn.droppable, $.fn.sortable, Bootstrap, FontAwesome (optional)\n */\n(function ($) {\n    var KEditor = $.keditor;\n    var contentEditor = $.contentEditor;\n    var flog = KEditor.log;\n    \n    KEditor.components['jumbotron'] = {\n        settingEnabled: true,\n        \n        settingTitle: 'Jumbotron Settings',\n        init: function (contentArea, container, component, keditor) {\n            var self = this;\n            var options = keditor.options;\n            \n            var componentContent = component.children('.keditor-component-content');\n            componentContent.prop('contenteditable', true);\n            \n            componentContent.on('input', function (e) {\n                if (typeof options.onComponentChanged === 'function') {\n                    options.onComponentChanged.call(contentArea, e, component);\n                }\n                \n                if (typeof options.onContainerChanged === 'function') {\n                    options.onContainerChanged.call(contentArea, e, container);\n                }\n                \n                if (typeof options.onContentChanged === 'function') {\n                    options.onContentChanged.call(contentArea, e);\n                }\n            });\n            \n            var editor = componentContent.ckeditor(options.ckeditorOptions).editor;\n            editor.on('instanceReady', function () {\n                flog('CKEditor is ready', component);\n                \n                if (typeof options.onComponentReady === 'function') {\n                    options.onComponentReady.call(contentArea, component, editor);\n                }\n            });\n        },\n        \n        getContent: function (component, keditor) {\n            flog('getContent \"jumbotron\" component', component);\n            \n            var componentContent = component.find('.keditor-component-content');\n            var id = componentContent.attr('id');\n            var editor = CKEDITOR.instances[id];\n            if (editor) {\n                return editor.getData();\n            } else {\n                return componentContent.html();\n            }\n        },\n        \n        initSettingForm: function (form, keditor) {\n            flog('init \"jumbotron\" settings', form);\n            \n            return $.ajax({\n                url: '/static/keditor/componentJumbotronSettings.html',\n                type: 'get',\n                dataType: 'HTML',\n                success: function (resp) {\n                    form.html(resp);\n                    \n                    form.find('.chk-inverse').on('click', function () {\n                        var comp = keditor.getSettingComponent();\n                        comp.find('.jumbotron')[this.checked ? 'addClass' : 'removeClass']('jumbotron-inverse');\n                    });\n                    \n                    form.find('[name=rounded]').on('click', function (e) {\n                        var comp = keditor.getSettingComponent();\n                        if (this.value == 'false') {\n                            comp.find('.jumbotron').css('border-radius', '0');\n                        } else {\n                            comp.find('.jumbotron').css('border-radius', '');\n                        }\n                    });\n                    \n                    var buttonColorPicker = form.find('.button-color-picker');\n                    contentEditor.initSimpleColorPicker(buttonColorPicker, function (color) {\n                        var comp = keditor.getSettingComponent();\n                        comp.find('.jumbotron').css('background-color', color);\n                        comp.attr('data-bgcolor', color);\n                    });\n                    \n                    var paddingSettings = form.find('.paddingSettings');\n                    paddingSettings.on('change', function () {\n                        var paddingValue = this.value || '';\n                        var component = keditor.getSettingComponent();\n                        var paddingProp = $(this).attr('name');\n                        if (paddingValue.trim() === '') {\n                            component.find('.jumbotron').css(paddingProp, '');\n                        } else {\n                            if (isNaN(paddingValue)) {\n                                paddingValue = 0;\n                                this.value = paddingValue;\n                            }\n                            component.find('.jumbotron').css(paddingProp, paddingValue + 'px');\n                        }\n                    });\n                    \n                    var marginSettings = form.find('.marginSettings');\n                    marginSettings.on('change', function () {\n                        var paddingValue = this.value || '';\n                        var component = keditor.getSettingComponent();\n                        var paddingProp = $(this).attr('name');\n                        if (paddingValue.trim() === '') {\n                            component.find('.jumbotron').css(paddingProp, '');\n                        } else {\n                            if (isNaN(paddingValue)) {\n                                paddingValue = 0;\n                                this.value = paddingValue;\n                            }\n                            component.find('.jumbotron').css(paddingProp, paddingValue + 'px');\n                        }\n                    });\n                }\n            });\n        },\n        \n        showSettingForm: function (form, component, keditor) {\n            flog('showSettingForm \"jumbotron\" component', component);\n            form.find('[name=button-color]').val(component.attr('data-bgcolor')).trigger('update');\n            form.find('.paddingSettings').each(function () {\n                $(this).val(component.find('.jumbotron').css($(this).attr('name')).replace('px', ''));\n            });\n            form.find('.marginSettings').each(function () {\n                $(this).val(component.find('.jumbotron').css($(this).attr('name')).replace('px', ''));\n            });\n            form.find('[name=showButton][value=false]').prop('checked', component.find('a').hasClass('hide'));\n            form.find('[name=rounded][value=false]').prop('checked', component.find('.jumbotron').css('border-radius').replace('px', '') === '0');\n            form.find('.chk-inverse').prop('checked', component.find('.jumbotron').hasClass('jumbotron-inverse'));\n        },\n        \n        destroy: function (component, keditor) {\n            flog('destroy \"text\" component', component);\n            \n            var id = component.find('.keditor-component-content').attr('id');\n            var editor = CKEDITOR.instances[id];\n            if (editor) {\n                editor.destroy();\n            }\n        }\n    };\n    \n})(jQuery);\n\n"],"sourceRoot":"/source/"}