!function (t) {
    var o = t.keditor, n = o.log;
    o.components.button = {
        settingEnabled: !0, settingTitle: "Button Settings", initSettingForm: function (t, e) {
            n('initSettingForm "button" component'), t.append('<form class="form-horizontal">    <div class="form-group">       <div class="col-md-12">           <label>Color</label>           <div class="input-group button-color-picker">               <span class="input-group-addon"><i></i></span>               <input type="text" value="" id="button-color" class="form-control" />           </div>       </div>    </div>    <div class="form-group button-text">       <label for="button-border-radius" class="col-sm-12">Border Radius</label>       <div class="col-sm-12">           <input type="number" id="button-border-radius" class="form-control" />       </div>    </div>    <div class="form-group">       <div class="col-md-12">           <label>Inner Padding (in px)</label>           <div class="row row-sm text-center">               <div class="col-xs-4 col-xs-offset-4">                   <input type="number" value="" class="button-inner-padding-top form-control" />                   <small>top</small>               </div>           </div>           <div class="row row-sm text-center">               <div class="col-xs-4">                   <input type="number" value="" class="button-inner-padding-left form-control" />                   <small>left</small>               </div>               <div class="col-xs-4 col-xs-offset-4">                   <input type="number" value="" class="button-inner-padding-right form-control" />                   <small>right</small>               </div>           </div>           <div class="row row-sm text-center">               <div class="col-xs-4 col-xs-offset-4">                   <input type="number" value="" class="button-inner-padding-bottom form-control" />                   <small>bottom</small>               </div>           </div>       </div>    </div>    <div class="form-group button-text">       <label for="button-text" class="col-sm-12">Text</label>       <div class="col-sm-12">           <input type="text" id="button-text" class="form-control" />       </div>    </div>    <div class="form-group button-text">       <label for="button-text" class="col-sm-12">Link</label>       <div class="col-sm-12">           <input type="text" id="button-link" class="form-control" />       </div>    </div>    <div class="form-group">       <div class="col-md-12">           <label>Text color</label>           <div class="input-group button-color-text-picker">               <span class="input-group-addon"><i></i></span>               <input type="text" value="" id="button-text-color" class="form-control" />           </div>       </div>    </div>    <div class="form-group button-text">       <label for="button-font-size" class="col-sm-12">Font Size</label>       <div class="col-sm-12">           <input type="number" id="button-font-size" class="form-control" />       </div>    </div>    <div class="form-group button-text">       <label for="button-font-family" class="col-sm-12">Font Family</label>       <div class="col-sm-12">           <select id="button-font-family" class="form-control">               <option value="">None</option>               <option value="arial,helvetica,sans-serif;">Arial</option>               <option value="comic sans ms,cursive;">Comic Sans MS</option>               <option value="courier new,courier,monospace;">Courier New</option>               <option value="lucida sans unicode,lucida grande,sans-serif;">Lucida Sans Unicode</option>               <option value="tahoma,geneva,sans-serif;">Tahoma</option>               <option value="times new roman,times,serif;">Times New Roman</option>               <option value="trebuchet ms,helvetica,sans-serif;">Trebuchet MS</option>               <option value="verdana,geneva,sans-serif;">Verdana</option>           </select>       </div>    </div>    <div class="form-group">       <label class="col-sm-12">Font Style</label>       <div class="col-sm-12">           <button type="button" class="btn btn-sm btn-default btn-bold"><i class="fa fa-bold"></i></button>           <button type="button" class="btn btn-sm btn-default btn-italic"><i class="fa fa-italic"></i></button>       </div>    </div>    <div class="form-group">       <label class="col-sm-12">Alignment</label>       <div class="col-sm-12">           <button type="button" class="btn btn-sm btn-default btn-button-left"><i class="fa fa-align-left"></i></button>           <button type="button" class="btn btn-sm btn-default btn-button-center"><i class="fa fa-align-center"></i></button>           <button type="button" class="btn btn-sm btn-default btn-button-right"><i class="fa fa-align-right"></i></button>           <button type="button" class="btn btn-sm btn-default btn-button-full"><i class="fa fa-align-justify"></i></button>       </div>    </div></form>'), t = t.find("form"), o.initPaddingControls(e, t, "prepend"), o.initBgColorControl(e, t, "prepend");
            var i = t.find(".button-color-picker");
            initColorPicker(i, function (o) {
                var n = e.getSettingComponent().find(".button-wrapper");
                o && "transparent" !== o ? (setStyle(n, "background-color", o), n.attr("bgcolor", o)) : (setStyle(n, "background-color", ""), n.removeAttr("bgcolor"), t.find(".button-color").val(""))
            });
            var a = t.find("#button-border-radius");
            a.on("change", function () {
                setStyle(e.getSettingComponent().find(".button-wrapper"), "border-radius", this.value + "px")
            });
            var l = t.find(".button-inner-padding-top"), r = t.find(".button-inner-padding-bottom"), s = t.find(".button-inner-padding-left"), d = t.find(".button-inner-padding-right");
            l.on("change", function () {
                setStyle(e.getSettingComponent().find(".button-inner"), "padding-top", (this.value > 0 ? this.value : 0) + "px")
            }), r.on("change", function () {
                setStyle(e.getSettingComponent().find(".button-inner"), "padding-bottom", (this.value > 0 ? this.value : 0) + "px")
            }), s.on("change", function () {
                setStyle(e.getSettingComponent().find(".button-inner"), "padding-left", (this.value > 0 ? this.value : 0) + "px")
            }), d.on("change", function () {
                setStyle(e.getSettingComponent().find(".button-inner"), "padding-right", (this.value > 0 ? this.value : 0) + "px")
            });
            var c = t.find("#button-text");
            c.on("change", function () {
                var t = this.value || "";
                t = t.trim(), e.getSettingComponent().find(".button-wrapper a").text(t)
            });
            var p = t.find("#button-link");
            p.on("change", function () {
                var t = this.value || "";
                t = t.trim(), e.getSettingComponent().find(".button-wrapper a").attr("href", t)
            });
            var u = t.find(".button-color-text-picker");
            initColorPicker(u, function (o) {
                var n = e.getSettingComponent().find(".button-wrapper a");
                o && "transparent" !== o ? setStyle(n, "color", o) : (setStyle(n, "color", ""), t.find(".button-text-color").val(""))
            });
            var f = t.find("#button-font-size");
            f.on("change", function () {
                setStyle(e.getSettingComponent().find(".button-wrapper a"), "font-size", (this.value > 0 ? this.value : 0) + "px")
            });
            var m = t.find("#button-font-family");
            m.on("change", function () {
                setStyle(e.getSettingComponent().find(".button-wrapper a"), "font-family", this.value)
            });
            var v = t.find(".btn-bold");
            v.on("click", function (t) {
                t.preventDefault();
                var o = "";
                v.hasClass("active") ? v.removeClass("active") : (v.addClass("active"), o = "bold"), setStyle(e.getSettingComponent().find(".button-wrapper a"), "font-weight", o)
            });
            var g = t.find(".btn-italic");
            g.on("click", function (t) {
                t.preventDefault();
                var o = "";
                g.hasClass("active") ? g.removeClass("active") : (g.addClass("active"), o = "italic"), setStyle(e.getSettingComponent().find(".button-wrapper a"), "font-style", o)
            });
            var b = t.find(".btn-button-left"), h = t.find(".btn-button-center"), C = t.find(".btn-button-right"), y = t.find(".btn-button-full"), w = function (t, o) {
                var n = e.getSettingComponent().find(".button-wrapper");
                b.removeClass("active"), h.removeClass("active"), C.removeClass("active"), y.removeClass("active"), t.addClass("active"), "full" === o ? n.attr("width", "100%").attr("align", "center") : n.removeAttr("width").attr("align", o)
            };
            b.on("click", function (t) {
                t.preventDefault(), b.hasClass("active") || w(b, "left")
            }), h.on("click", function (t) {
                t.preventDefault(), h.hasClass("active") || w(h, "center")
            }), C.on("click", function (t) {
                t.preventDefault(), C.hasClass("active") || w(C, "right")
            }), y.on("click", function (t) {
                t.preventDefault(), y.hasClass("active") || w(y, "full")
            })
        }, showSettingForm: function (t, e, i) {
            n('showSettingForm "button" component', e), o.showBgColorControl(i, t, e), o.showPaddingControls(i, t, e);
            var a = e.find(".button-wrapper"), l = a.find(".button-inner"), r = l.find("a"), s = t.find(".button-color-picker");
            s.colorpicker("setValue", a.css("background-color") || "");
            var d = t.find("#button-border-radius"), c = a.css("border-radius");
            d.val(c ? c.replace("px", "") : "");
            var p = t.find(".button-inner-padding-top"), u = l.css("padding-top");
            p.val(u ? u.replace("px", "") : "0");
            var f = t.find(".button-inner-padding-bottom"), m = l.css("padding-bottom");
            f.val(m ? m.replace("px", "") : "0");
            var v = t.find(".button-inner-padding-left"), g = l.css("padding-left");
            v.val(g ? g.replace("px", "") : "0");
            var b = t.find(".button-inner-padding-right"), h = l.css("padding-right");
            b.val(h ? h.replace("px", "") : "0");
            var C = t.find("#button-text");
            C.val(r.text());
            var y = t.find("#button-link");
            y.val(r.attr("href"));
            var w = t.find(".button-color-text-picker");
            w.colorpicker("setValue", r.css("color") || "");
            var S = t.find("#button-font-size"), k = r.css("font-size");
            S.val(k ? k.replace("px", "") : "");
            var x = t.find("#button-font-family");
            x.val(r.css("font-family"));
            var F = t.find(".btn-bold"), P = r.css("font-weight");
            F["700" === P || "bold" === P ? "addClass" : "removeClass"]("active");
            var T = t.find(".btn-italic");
            T["italic" === r.css("font-style") ? "addClass" : "removeClass"]("active");
            var B = t.find(".btn-button-left"), I = t.find(".btn-button-center"), R = t.find(".btn-button-right"), z = t.find(".btn-button-full");
            if (B.removeClass("active"), I.removeClass("active"), R.removeClass("active"), z.removeClass("active"), "100%" === a.attr("width"))z.addClass("active"); else {
                var E = a.attr("align");
                switch (E) {
                    case"left":
                        B.addClass("active");
                        break;
                    case"center":
                        I.addClass("active");
                        break;
                    case"right":
                        R.addClass("active")
                }
            }
        }
    }
}(jQuery), function (t) {
    var o = t.keditor, n = o.log;
    o.components.line = {
        settingEnabled: !0, settingTitle: "Line Settings", initSettingForm: function (t, e) {
            n('initSettingForm "line" component'), t.append('<form class="form-horizontal">    <div class="form-group">       <div class="col-md-12">           <label>Color</label>           <div class="input-group line-color-picker">               <span class="input-group-addon"><i></i></span>               <input type="text" value="" id="line-color" class="form-control" />           </div>       </div>    </div>    <div class="form-group">       <label for="line-height" class="col-sm-12">Height</label>       <div class="col-sm-12">           <input type="number" id="line-height" class="form-control" />       </div>    </div></form>');
            var i = t.find("#line-height");
            i.on("change", function () {
                setStyle(e.getSettingComponent().find(".wrapper div"), "height", this.value)
            }), t = t.find("form"), o.initPaddingControls(e, t, "prepend"), o.initBgColorControl(e, t, "prepend");
            var a = t.find(".line-color-picker");
            initColorPicker(a, function (o) {
                var n = e.getSettingComponent().find(".wrapper"), i = n.children("div");
                o && "transparent" !== o ? setStyle(i, "background-color", o) : (setStyle(i, "background-color", ""), t.find("#line-color").val(""))
            })
        }, showSettingForm: function (t, e, i) {
            n('showSettingForm "line" component', e);
            var a = t.find("#line-height"), l = e.find(".wrapper > div").css("height");
            a.val(l ? l.replace("px", "") : "0"), o.showBgColorControl(i, t, e), o.showPaddingControls(i, t, e);
            var r = e.find(".wrapper"), s = r.children("div"), d = t.find(".line-color-picker");
            n(s.css("background-color")), d.colorpicker("setValue", s.css("background-color") || "")
        }
    }
}(jQuery), function (t) {
    var o = t.keditor, n = o.log;
    o.components.photo = {
        init: function (t, o, e, i) {
            n('init "photo" component', e);
            var a = i.options;
            "function" == typeof a.onComponentReady && a.onComponentReady.call(t, e)
        }, settingEnabled: !0, settingTitle: "Photo Settings", initSettingForm: function (t, e) {
            n('initSettingForm "photo" component');
            var i = this;
            e.options;
            t.append('<form class="form-horizontal">   <div class="form-group photo-edit-wrapper">       <div class="col-sm-12">           <button type="button" class="btn btn-block btn-primary" id="photo-edit">Change Photo</button>       </div>   </div>   <div class="form-group photo-alt-wrapper">       <label for="photo-alt" class="col-sm-12">Alt text</label>       <div class="col-sm-12">           <input type="text" id="photo-alt" class="form-control" />       </div>   </div>   <div class="form-group">       <label for="photo-fullwidth" class="col-sm-12">Full width</label>       <div class="col-sm-12">           <input type="checkbox" id="photo-fullwidth" />       </div>   </div>   <div class="form-group">       <label for="photo-width" class="col-sm-12">Linkable</label>       <div class="col-sm-12">           <input type="checkbox" id="photo-linkable" />       </div>   </div>   <div class="form-group">       <label for="photo-height" class="col-sm-12">Link</label>       <div class="col-sm-12">           <input type="text" id="photo-link" class="form-control" disabled="disabled" />           <span class="help-block" style="display: none;">Link is invalid</span>       </div>   </div>   <div class="form-group">       <label for="photo-height" class="col-sm-12">Open link in</label>       <div class="col-sm-12">           <select class="form-control" id="photo-target" disabled="disabled">               <option value="" selected="selected">Current tab/window</option>               <option value="_blank">New tab/window</option>           </select>       </div>   </div></form>');
            var a = t.find("#photo-link");
            a.on("change", function () {
                var t = this.value.trim(), o = new RegExp("^[a-zA-Z0-9_/%:/./-]+$"), n = a.next(), i = a.closest(".form-group");
                o.test(t) ? (e.getSettingComponent().find("a").attr("href", t), n.hide(), i.removeClass("has-error")) : (n.show(), i.addClass("has-error"))
            });
            var l = t.find("#photo-target");
            l.on("change", function () {
                e.getSettingComponent().find("a").attr("target", this.value)
            });
            var r = t.find("#photo-linkable");
            r.on("click", function () {
                var t = e.getSettingComponent().find("img");
                r.is(":checked") ? (a.prop("disabled", !1), l.prop("disabled", !1), t.wrap('<a href="" style="text-decoration: none;"></a>'), t.css("border", "0")) : (a.prop("disabled", !0), l.prop("disabled", !0), t.unwrap("a"))
            });
            var s = t.find("#photo-edit"), d = window.location.pathname.replace("edmeditor", "");
            e.options.basePath && (d = e.options.basePath), s.mselect({
                contentTypes: ["image"], bs3Modal: !0, pagePath: d, basePath: d, onSelectFile: function (t, o, n, a) {
                    var l = e.getSettingComponent().find("img");
                    l.attr("src", "http://" + window.location.host + "/_hashes/files/" + a), i.adjustWidthForImg(l, !0)
                }
            });
            var c = t.find("#photo-alt");
            c.on("change", function () {
                e.getSettingComponent().find("img").attr("alt", this.value)
            });
            var p = t.find("#photo-fullwidth");
            p.on("click", function () {
                var t = e.getSettingComponent().find("img");
                i.adjustWidthForImg(t, p.is(":checked"))
            }), t = t.find("form"), o.initBgColorControl(e, t, "after", ".photo-edit-wrapper"), o.initPaddingControls(e, t, "before", ".photo-alt-wrapper")
        }, showSettingForm: function (t, e, i) {
            n('showSettingForm "photo" component', e);
            var a = e.find("img"), l = t.find("#photo-alt");
            l.val(a.attr("alt") || ""), o.showBgColorControl(i, t, e), o.showPaddingControls(i, t, e);
            var r = t.find("#photo-fullwidth");
            r.prop("checked", a.hasClass("full-width"));
            var s = t.find("#photo-link"), d = t.find("#photo-target"), c = t.find("#photo-linkable");
            s.next().hide(), s.closest(".form-group").removeClass("has-error");
            var p = a.parent("a");
            p.length > 0 ? (c.prop("checked", !0), s.prop("disabled", !1).val(p.attr("href")), d.prop("disabled", !1).val(p.attr("target"))) : (c.prop("checked", !1), s.prop("disabled", !0).val(""), d.prop("disabled", !0).val(""))
        }, adjustWidthForImg: function (o, e) {
            n("adjustWidthForImg", o, e), o.css("display", "none"), t("<img />").attr("src", o.attr("src")).load(function () {
                var t = this.width, n = this.height, i = t / n, a = o.parent();
                a.is("a") && (a = a.parent());
                var l = a.width();
                setTimeout(function () {
                    o.attr({width: e ? l : t, height: e ? l / i : n}), o.css("display", "block")
                }, 200)
            })
        }
    }
}(jQuery), function (t) {
    var o = t.keditor, n = o.log;
    o.components.spacer = {
        settingEnabled: !0, settingTitle: "Spacer Settings", initSettingForm: function (t, e) {
            n('initSettingForm "spacer" component'), t.append('<form class="form-horizontal">    <div class="form-group">       <label for="spacer-height" class="col-sm-12">Height</label>       <div class="col-sm-12">           <input type="number" id="spacer-height" class="form-control" />       </div>    </div></form>');
            var i = t.find("#spacer-height");
            i.on("change", function () {
                e.getSettingComponent().find(".spacer").attr("height", this.value)
            }), t = t.find("form"), o.initBgColorControl(e, t, "prepend")
        }, showSettingForm: function (t, e, i) {
            n('showSettingForm "spacer" component', e);
            var a = t.find("#spacer-height");
            a.val(e.find(".spacer").attr("height")), o.showBgColorControl(i, t, e)
        }
    }
}(jQuery), function (t) {
    var o = t.keditor, n = o.log;
    CKEDITOR.disableAutoInline = !0, o.components.text = {
        options: {
            title: !1,
            allowedContent: !0,
            bodyId: "editor",
            templates_replaceContent: !1,
            toolbarGroups: [{name: "document", groups: ["mode", "document", "doctools"]}, {name: "editing", groups: ["find", "selection", "spellchecker", "editing"]}, {
                name: "forms",
                groups: ["forms"]
            }, {name: "basicstyles", groups: ["basicstyles", "cleanup"]}, {name: "paragraph", groups: ["list", "indent", "blocks", "align", "bidi", "paragraph"]}, {
                name: "links",
                groups: ["links"]
            }, {name: "insert", groups: ["insert"]}, "/", {name: "clipboard", groups: ["clipboard", "undo"]}, {name: "styles", groups: ["styles"]}, {
                name: "colors",
                groups: ["colors"]
            }, {name: "tools", groups: ["tools"]}, {name: "others", groups: ["others"]}, {name: "about", groups: ["about"]}],
            extraPlugins: "sourcedialog,lineheight,onchange,fuse-image",
            removePlugins: "table,magicline,tabletools",
            removeButtons: "Save,NewPage,Preview,Print,Templates,PasteText,PasteFromWord,Find,Replace,SelectAll,Scayt,Form,HiddenField,ImageButton,Button,Select,Textarea,TextField,Radio,Checkbox,Outdent,Indent,Blockquote,CreateDiv,Language,Table,HorizontalRule,Smiley,SpecialChar,PageBreak,Iframe,Styles,BGColor,Maximize,About,ShowBlocks,BidiLtr,BidiRtl,Flash,Image,Subscript,Superscript,Anchor",
            enterMode: CKEDITOR.ENTER_DIV,
            forceEnterMode: !0,
            filebrowserBrowseUrl: "/static/fckfilemanager/browser/default/browser.html?Type=Image&Connector=/fck_connector.html",
            filebrowserUploadUrl: "/uploader/upload",
            format_tags: "p;h1;h2;h3;h4;h5;h6",
            stylesSet: "myStyles:" + stylesPath,
            line_height: "1;1.2;1.5;2;2.2;2.5"
        }, init: function (o, e, i, a) {
            n('init "text" component', i);
            var l = this, r = a.options;
            l.options.skin = editorSkin, l.options.templates_files = [templatesPath];
            var s = i.children(".keditor-component-content"), d = s.find(".text-wrapper"), c = d.html(), p = t('<div class="text-editor" contenteditable="true"></div>').attr("id", a.generateId("text-editor")).html(c);
            d.html(p);
            var u = p.ckeditor(l.options).editor;
            u.on("instanceReady", function () {
                n("CKEditor is ready", i), "function" == typeof r.onComponentReady && r.onComponentReady.call(o, i, u)
            }), p.on("input", function (t) {
                "function" == typeof r.onComponentChanged && r.onComponentChanged.call(o, t, i), "function" == typeof r.onContainerChanged && r.onContainerChanged.call(o, t, e), "function" == typeof r.onContentChanged && r.onContentChanged.call(o, t)
            })
        }, getContent: function (t, o) {
            n('getContent "text" component', t);
            var e = t.find(".keditor-component-content"), i = e.find(".text-wrapper"), a = e.find(".text-editor"), l = a.attr("id"), r = CKEDITOR.instances[l];
            return r && i.html(r.getData()), e.html()
        }, destroy: function (t, o) {
            n('destroy "text" component', t);
            var e = t.find(".text-editor").attr("id"), i = CKEDITOR.instances[e];
            i && i.destroy()
        }, settingEnabled: !0, settingTitle: "Text Settings", initSettingForm: function (t, e) {
            n('initSettingForm "text" component'), t.append('<form class="form-horizontal"></form>'), t = t.find("form"), o.initBgColorControl(e, t, "append"), o.initPaddingControls(e, t, "append")
        }, showSettingForm: function (t, e, i) {
            n('showSettingForm "text" component', e), o.showBgColorControl(i, t, e), o.showPaddingControls(i, t, e)
        }
    }
}(jQuery);
//# sourceMappingURL=keditor-edm-components-0.0.0.min.js.map
