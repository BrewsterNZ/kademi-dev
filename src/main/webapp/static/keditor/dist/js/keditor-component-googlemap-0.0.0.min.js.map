{"version":3,"sources":["keditor-component-googlemap-0.0.0.js"],"names":["$","KEditor","keditor","flog","log","components","init","contentArea","container","component","script","find","length","remove","removeAttr","place","attr","maptype","window","on","trigger","getContent","componentContent","children","html","append","settingEnabled","settingTitle","initSettingForm","form","apiKey","mapjs","google","maps","places","e","this","checked","value","removeClass","cls","not","val","addClass","comp","getSettingComponent","data","event","self","initAutocomplete","input","i","setInterval","clearInterval","keyCode","iframe","src","alert","btn169","btn43","preventDefault","showSettingForm","ratio169","hasClass","ratio43","prop","firstLoad","siblings","googleMapInitialized","setTimeout","mapdiv","map","Map","zoom","mapTypeId","searchBox","SearchBox","addListener","setBounds","getBounds","markers","getPlaces","forEach","marker","setMap","bounds","LatLngBounds","geometry","console","icon","url","size","Size","origin","Point","anchor","scaledSize","push","Marker","title","name","position","location","viewport","union","extend","fitBounds","initKeditorMapSetting","jQuery"],"mappings":"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","file":"keditor-component-googlemap-0.0.0.min.js","sourcesContent":["/**\r\n * KEditor Google Map Component\r\n * @copyright: Kademi (http://kademi.co)\r\n * @author: Kademi (http://kademi.co)\r\n * @version: @{version}\r\n * @dependencies: $, $.fn.draggable, $.fn.droppable, $.fn.sortable, Bootstrap, FontAwesome (optional)\r\n */\r\n(function ($) {\r\n    var KEditor = $.keditor;\r\n    var flog = KEditor.log;\r\n\r\n    KEditor.components['googlemap'] = {\r\n        init: function (contentArea, container, component, keditor) {\r\n            var script = component.find('script');\r\n            if (script.length) {\r\n                script.remove();\r\n            }\r\n            component.removeAttr('data-firstLoad');\r\n            var place = component.attr('data-place');\r\n            var maptype = component.attr('data-maptype');\r\n            if (place && maptype === 'manually') {\r\n                $(window).on('load', function () {\r\n                    component.find('.btn-component-setting').trigger('click');\r\n                });\r\n            }\r\n        },\r\n        getContent: function (component, keditor) {\r\n            flog('getContent \"googlemap\" component', component);\r\n            var componentContent = component.children('.keditor-component-content');\r\n            componentContent.find('.googlemap-cover').remove();\r\n            var place = component.attr('data-place');\r\n            var maptype = component.attr('data-maptype');\r\n            component.find('.kgooglemap').html('');\r\n            var script = '<script>$(function(){if(!$(document.body).hasClass(\"content-editor-page\")){var apiKey=\"AIzaSyBUcuZxwpBXCPztG7ot-rITXJbycPuS7gs\";var s=document.createElement(\"script\");s.type=\"text/javascript\";s.async=true;s.defer=true;s.src=\"https://maps.googleapis.com/maps/api/js?key=\"+apiKey+\"&callback=kgooglemapInit&libraries=places\";$(\"head\").append(s);window.kgooglemapInit=function(){var mapdiv=$(\".kgooglemap\").not(\".hide\");mapdiv.each(function(){var parent=$(this).parents(\"[data-type=component-googlemap]\");if(parent.attr(\"data-maptype\")!==\"manually\")return;var map=new google.maps.Map(this,{zoom:13,mapTypeId:\"roadmap\"});var place=parent.attr(\"data-place\");var input=parent.find(\"input\")[0];input.value=place;var searchBox=new google.maps.places.SearchBox(input);map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);setTimeout(function(){google.maps.event.trigger(input,\"focus\");google.maps.event.trigger(input,\"keydown\",{keyCode:13});},500);map.addListener(\"bounds_changed\",function(){searchBox.setBounds(map.getBounds());});var markers=[];searchBox.addListener(\"places_changed\",function(){var places=searchBox.getPlaces();if(places.length==0){return;}markers.forEach(function(marker){marker.setMap(null);});markers=[];var bounds=new google.maps.LatLngBounds();places.forEach(function(place){if(!place.geometry){console.log(\"Returned place contains no geometry\");return;}var icon={url:place.icon,size:new google.maps.Size(71,71),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)};markers.push(new google.maps.Marker({map:map,icon:icon,title:place.name,position:place.geometry.location}));if(place.geometry.viewport){bounds.union(place.geometry.viewport);}else{bounds.extend(place.geometry.location);}});map.fitBounds(bounds);});})}}});</script>';\r\n            component.find('.embed-responsive').append(script);\r\n            return componentContent.html();\r\n        },\r\n\r\n        settingEnabled: true,\r\n\r\n        settingTitle: 'Google Map Settings',\r\n\r\n        initSettingForm: function (form, keditor) {\r\n            flog('initSettingForm \"googlemap\" component');\r\n            var apiKey = 'AIzaSyBUcuZxwpBXCPztG7ot-rITXJbycPuS7gs';\r\n            var mapjs = '<script src=\"https://maps.googleapis.com/maps/api/js?key=' + apiKey + '&callback=initKeditorMapSetting&libraries=places\" async defer></script>';\r\n            if (window.google && window.google.maps && google.maps.places){\r\n                mapjs = '';\r\n            }\r\n            form.append(\r\n                mapjs +\r\n                '<form class=\"form-horizontal\" onsubmit=\"return false;\">' +\r\n                '   <div class=\"form-group\">' +\r\n                '       <label class=\"col-sm-12\">Map type</label>' +\r\n                '       <div class=\"radio-inline\">' +\r\n                '           <label class=\"radio-inline\"><input checked type=\"radio\" name=\"mapType\" class=\"mapType\" value=\"embed\"> Embed</label>' +\r\n                '           <label class=\"radio-inline\"><input type=\"radio\" name=\"mapType\" class=\"mapType\" value=\"manually\"> Manually</label>' +\r\n                '       </div>' +\r\n                '   </div>' +\r\n                '   <div class=\"form-group embed\">' +\r\n                '       <div class=\"col-sm-12\">' +\r\n                '           <textarea class=\"form-control\" name=\"mapEmbedCode\" placeholder=\"Embed code\"></textarea>' +\r\n                '       </div>' +\r\n                '   </div>' +\r\n                '   <div class=\"form-group manually hide\">' +\r\n                '       <div class=\"col-sm-12\">' +\r\n                '           <input class=\"form-control\" name=\"mapAddress\" placeholder=\"Enter address\" />' +\r\n                '       </div>' +\r\n                '   </div>' +\r\n                '   <div class=\"form-group\">' +\r\n                '       <label class=\"col-sm-12\">Aspect Ratio</label>' +\r\n                '       <div class=\"col-sm-12\">' +\r\n                '           <button type=\"button\" class=\"btn btn-sm btn-default btn-googlemap-169\">16:9</button>' +\r\n                '           <button type=\"button\" class=\"btn btn-sm btn-default btn-googlemap-43\">4:3</button>' +\r\n                '       </div>' +\r\n                '   </div>' +\r\n                '</form>'\r\n            );\r\n            form.find('.mapType').on('click', function (e) {\r\n                if (this.checked) {\r\n                    $('.' + this.value).removeClass('hide');\r\n                    var cls = form.find('.mapType').not(this).val();\r\n                    $('.' + cls).addClass('hide');\r\n                    var comp = keditor.getSettingComponent();\r\n                    comp.attr('data-maptype', this.value);\r\n                    if (this.value === 'manually') {\r\n                        comp.find('iframe').addClass('hide');\r\n                        comp.find('.kgooglemap').removeClass('hide');\r\n                        if (comp.find('.kgooglemap').data('map')) {\r\n                            google.maps.event.trigger(comp.find('.kgooglemap').data('map'), \"resize\");\r\n                        } else {\r\n                            self.initAutocomplete(comp, form);\r\n                            var input = form.find('[name=mapAddress]')[0];\r\n                            var i = setInterval(function(){\r\n                                if (comp.find('.kgooglemap').data('map')){\r\n                                    clearInterval(i);\r\n                                    google.maps.event.trigger(input, 'focus')\r\n                                    google.maps.event.trigger(input, 'keydown', {\r\n                                        keyCode: 13\r\n                                    });\r\n                                }\r\n                            },100);\r\n                        }\r\n                    } else {\r\n                        comp.find('iframe').removeClass('hide');\r\n                        comp.find('.kgooglemap').addClass('hide');\r\n                    }\r\n                }\r\n            });\r\n\r\n            var self = this;\r\n            form.find('[name=mapEmbedCode]').on('change', function () {\r\n                var iframe = $(this.value);\r\n                var src = iframe.attr('src');\r\n                if (iframe.length > 0 && src && src.length > 0) {\r\n                    keditor.getSettingComponent().find('.embed-responsive-item').attr('src', src);\r\n                } else {\r\n                    alert('Your Google Map embed code is invalid!');\r\n                }\r\n            });\r\n\r\n\r\n            var btn169 = form.find('.btn-googlemap-169');\r\n            var btn43 = form.find('.btn-googlemap-43');\r\n\r\n            btn169.on('click', function (e) {\r\n                e.preventDefault();\r\n                $(this).addClass('btn-primary').removeClass('btn-default');\r\n                btn43.removeClass('btn-primary').addClass('btn-default');\r\n                keditor.getSettingComponent().find('.embed-responsive').removeClass('embed-responsive-4by3').addClass('embed-responsive-16by9');\r\n                var comp = keditor.getSettingComponent();\r\n                if (comp.attr('maptype') === 'manually') {\r\n                    if (comp.find('.kgooglemap').data('map')) {\r\n                        google.maps.event.trigger(comp.find('.kgooglemap').data('map'), \"resize\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            btn43.on('click', function (e) {\r\n                e.preventDefault();\r\n                $(this).addClass('btn-primary').removeClass('btn-default');\r\n                btn169.removeClass('btn-primary').addClass('btn-default');\r\n                keditor.getSettingComponent().find('.embed-responsive').removeClass('embed-responsive-16by9').addClass('embed-responsive-4by3');\r\n                var comp = keditor.getSettingComponent();\r\n                if (comp.attr('maptype') === 'manually') {\r\n                    if (comp.find('.kgooglemap').data('map')) {\r\n                        google.maps.event.trigger(comp.find('.kgooglemap').data('map'), \"resize\");\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        showSettingForm: function (form, component, keditor) {\r\n            var self = this;\r\n            var maptype = component.attr('data-maptype');\r\n            var place = component.attr('data-place');\r\n            var ratio169 = component.find('.embed-responsive').hasClass('embed-responsive-16by9');\r\n            var ratio43 = component.find('.embed-responsive').hasClass('embed-responsive-4by3');\r\n            if (ratio43){\r\n                form.find('.btn-googlemap-43').addClass('btn-primary').removeClass('btn-default');\r\n            }\r\n            if (ratio169){\r\n                form.find('.btn-googlemap-169').addClass('btn-primary').removeClass('btn-default');\r\n            }\r\n            form.find('.mapType[value=' + maptype + ']').prop('checked', true);\r\n            var src = component.find('iframe').attr('src');\r\n            var iframe = '<iframe class=\"embed-responsive-item\" src=\"' + src + '\"></iframe>';\r\n            if (!place){\r\n                place = 'Hanoi, Vietnam';\r\n            }\r\n            form.find('[name=mapAddress]').val(place);\r\n            form.find('[name=mapEmbedCode]').val(iframe);\r\n            var firstLoad = component.attr('data-firstLoad');\r\n            if (maptype === 'manually') {\r\n                form.find('.manually').removeClass('hide').siblings('.embed').addClass('hide');\r\n\r\n                if (!firstLoad && place) {\r\n                    var i = setInterval(function () {\r\n                        if (window.googleMapInitialized) {\r\n                            clearInterval(i);\r\n                            self.initAutocomplete(component, form);\r\n                            setTimeout(function () {\r\n                                var input = form.find('[name=mapAddress]')[0];\r\n                                google.maps.event.trigger(input, 'focus')\r\n                                google.maps.event.trigger(input, 'keydown', {\r\n                                    keyCode: 13\r\n                                });\r\n                                component.attr('data-firstLoad', 'false');\r\n                            }, 1000);\r\n                        }\r\n                    }, 100);\r\n                }\r\n            } else {\r\n                form.find('.manually').addClass('hide').siblings('.embed').removeClass('hide');\r\n            }\r\n        },\r\n\r\n        initAutocomplete: function (component, form) {\r\n            if (!window.googleMapInitialized) {\r\n                alert('google map is not initialized');\r\n                return;\r\n            }\r\n            var mapdiv = component.find('.kgooglemap')[0];\r\n            var map = new google.maps.Map(mapdiv, {\r\n                zoom: 13,\r\n                mapTypeId: 'roadmap'\r\n            });\r\n            // Create the search box and link it to the UI element.\r\n            var input = form.find('[name=mapAddress]')[0];\r\n            var searchBox = new google.maps.places.SearchBox(input);\r\n            //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n\r\n            // Bias the SearchBox results towards current map's viewport.\r\n            map.addListener('bounds_changed', function () {\r\n                searchBox.setBounds(map.getBounds());\r\n            });\r\n\r\n            var markers = [];\r\n            // Listen for the event fired when the user selects a prediction and retrieve\r\n            // more details for that place.\r\n\r\n            searchBox.addListener('places_changed', function () {\r\n                var places = searchBox.getPlaces();\r\n\r\n                if (places.length == 0) {\r\n                    return;\r\n                }\r\n\r\n                // Clear out the old markers.\r\n                markers.forEach(function (marker) {\r\n                    marker.setMap(null);\r\n                });\r\n                markers = [];\r\n                // For each place, get the icon, name and location.\r\n                var bounds = new google.maps.LatLngBounds();\r\n                places.forEach(function (place) {\r\n                    if (!place.geometry) {\r\n                        console.log(\"Returned place contains no geometry\");\r\n                        return;\r\n                    }\r\n\r\n                    var icon = {\r\n                        url: place.icon,\r\n                        size: new google.maps.Size(71, 71),\r\n                        origin: new google.maps.Point(0, 0),\r\n                        anchor: new google.maps.Point(17, 34),\r\n                        scaledSize: new google.maps.Size(25, 25)\r\n                    };\r\n\r\n                    // Create a marker for each place.\r\n                    markers.push(new google.maps.Marker({\r\n                        map: map,\r\n                        icon: icon,\r\n                        title: place.name,\r\n                        position: place.geometry.location\r\n                    }));\r\n\r\n                    if (place.geometry.viewport) {\r\n                        // Only geocodes have viewport.\r\n                        bounds.union(place.geometry.viewport);\r\n                    } else {\r\n                        bounds.extend(place.geometry.location);\r\n                    }\r\n                });\r\n                map.fitBounds(bounds);\r\n                component.attr('data-place', input.value);\r\n            });\r\n\r\n            component.find('.kgooglemap').data('map', map);\r\n        }\r\n    };\r\n\r\n    window.initKeditorMapSetting = function () {\r\n        window.googleMapInitialized = true;\r\n    }\r\n})(jQuery);\r\n"]}