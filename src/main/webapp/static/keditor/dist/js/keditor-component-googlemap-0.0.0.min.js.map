{"version":3,"sources":["keditor-component-googlemap-0.0.0.js"],"names":["$","KEditor","keditor","flog","log","components","init","contentArea","container","component","script","find","length","remove","removeAttr","place","attr","maptype","window","on","trigger","getContent","componentContent","children","html","append","settingEnabled","settingTitle","initSettingForm","form","self","this","ajax","url","type","dataType","success","resp","apiKey","mapjs","google","maps","places","e","checked","value","removeClass","cls","not","val","addClass","comp","getSettingComponent","data","event","initAutocomplete","input","i","setInterval","clearInterval","keyCode","iframe","src","alert","btn169","btn43","preventDefault","showSettingForm","ratio169","hasClass","ratio43","prop","firstLoad","siblings","googleMapInitialized","setTimeout","mapdiv","map","Map","zoom","mapTypeId","searchBox","SearchBox","addListener","setBounds","getBounds","markers","getPlaces","forEach","marker","setMap","bounds","LatLngBounds","geometry","console","icon","size","Size","origin","Point","anchor","scaledSize","push","Marker","title","name","position","location","viewport","union","extend","fitBounds","initKeditorMapSetting","jQuery"],"mappings":"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","file":"keditor-component-googlemap-0.0.0.min.js","sourcesContent":["/**\n * KEditor Google Map Component\n * @copyright: Kademi (http://kademi.co)\n * @author: Kademi (http://kademi.co)\n * @version: @{version}\n * @dependencies: $, $.fn.draggable, $.fn.droppable, $.fn.sortable, Bootstrap, FontAwesome (optional)\n */\n(function ($) {\n    var KEditor = $.keditor;\n    var flog = KEditor.log;\n    \n    KEditor.components['googlemap'] = {\n        init: function (contentArea, container, component, keditor) {\n            var script = component.find('script');\n            if (script.length) {\n                script.remove();\n            }\n            component.removeAttr('data-firstLoad');\n            var place = component.attr('data-place');\n            var maptype = component.attr('data-maptype');\n            if (place && maptype === 'manually') {\n                $(window).on('load', function () {\n                    component.find('.btn-component-setting').trigger('click');\n                });\n            }\n        },\n        getContent: function (component, keditor) {\n            flog('getContent \"googlemap\" component', component);\n            var componentContent = component.children('.keditor-component-content');\n            componentContent.find('.googlemap-cover').remove();\n            var place = component.attr('data-place');\n            var maptype = component.attr('data-maptype');\n            component.find('.kgooglemap').html('');\n            var script = '<script>$(function(){if(!$(document.body).hasClass(\"content-editor-page\")){var apiKey=\"AIzaSyBUcuZxwpBXCPztG7ot-rITXJbycPuS7gs\";var s=document.createElement(\"script\");s.type=\"text/javascript\";s.async=true;s.defer=true;s.src=\"https://maps.googleapis.com/maps/api/js?key=\"+apiKey+\"&callback=kgooglemapInit&libraries=places\";$(\"head\").append(s);window.kgooglemapInit=function(){var mapdiv=$(\".kgooglemap\").not(\".hide\");mapdiv.each(function(){var parent=$(this).parents(\"[data-type=component-googlemap]\");if(parent.attr(\"data-maptype\")!==\"manually\")return;var map=new google.maps.Map(this,{zoom:13,mapTypeId:\"roadmap\"});var place=parent.attr(\"data-place\");var input=parent.find(\"input\")[0];input.value=place;var searchBox=new google.maps.places.SearchBox(input);map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);setTimeout(function(){google.maps.event.trigger(input,\"focus\");google.maps.event.trigger(input,\"keydown\",{keyCode:13});},500);map.addListener(\"bounds_changed\",function(){searchBox.setBounds(map.getBounds());});var markers=[];searchBox.addListener(\"places_changed\",function(){var places=searchBox.getPlaces();if(places.length==0){return;}markers.forEach(function(marker){marker.setMap(null);});markers=[];var bounds=new google.maps.LatLngBounds();places.forEach(function(place){if(!place.geometry){console.log(\"Returned place contains no geometry\");return;}var icon={url:place.icon,size:new google.maps.Size(71,71),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)};markers.push(new google.maps.Marker({map:map,icon:icon,title:place.name,position:place.geometry.location}));if(place.geometry.viewport){bounds.union(place.geometry.viewport);}else{bounds.extend(place.geometry.location);}});map.fitBounds(bounds);});})}}});</script>';\n            component.find('.embed-responsive').append(script);\n            return componentContent.html();\n        },\n        \n        settingEnabled: true,\n        \n        settingTitle: 'Google Map Settings',\n        \n        initSettingForm: function (form, keditor) {\n            flog('init \"googlemap\" settings', form);\n            var self = this;\n            \n            return $.ajax({\n                url: '/static/keditor/componentGoogleMapSettings.html',\n                type: 'get',\n                dataType: 'HTML',\n                success: function (resp) {\n                    var apiKey = 'AIzaSyBUcuZxwpBXCPztG7ot-rITXJbycPuS7gs';\n                    var mapjs = '<script src=\"https://maps.googleapis.com/maps/api/js?key=' + apiKey + '&callback=initKeditorMapSetting&libraries=places\" async defer></script>';\n                    if (window.google && window.google.maps && google.maps.places) {\n                        mapjs = '';\n                    }\n                    \n                    form.append(\n                        mapjs + resp\n                    );\n                    \n                    form.find('.mapType').on('click', function (e) {\n                        if (this.checked) {\n                            $('.' + this.value).removeClass('hide');\n                            var cls = form.find('.mapType').not(this).val();\n                            $('.' + cls).addClass('hide');\n                            var comp = keditor.getSettingComponent();\n                            comp.attr('data-maptype', this.value);\n                            if (this.value === 'manually') {\n                                comp.find('iframe').addClass('hide');\n                                comp.find('.kgooglemap').removeClass('hide');\n                                if (comp.find('.kgooglemap').data('map')) {\n                                    google.maps.event.trigger(comp.find('.kgooglemap').data('map'), \"resize\");\n                                } else {\n                                    self.initAutocomplete(comp, form);\n                                    var input = form.find('[name=mapAddress]')[0];\n                                    var i = setInterval(function () {\n                                        if (comp.find('.kgooglemap').data('map')) {\n                                            clearInterval(i);\n                                            google.maps.event.trigger(input, 'focus')\n                                            google.maps.event.trigger(input, 'keydown', {\n                                                keyCode: 13\n                                            });\n                                        }\n                                    }, 100);\n                                }\n                            } else {\n                                comp.find('iframe').removeClass('hide');\n                                comp.find('.kgooglemap').addClass('hide');\n                            }\n                        }\n                    });\n                    \n                    form.find('[name=mapEmbedCode]').on('change', function () {\n                        var iframe = $(this.value);\n                        var src = iframe.attr('src');\n                        if (iframe.length > 0 && src && src.length > 0) {\n                            keditor.getSettingComponent().find('.embed-responsive-item').attr('src', src);\n                        } else {\n                            alert('Your Google Map embed code is invalid!');\n                        }\n                    });\n                    \n                    var btn169 = form.find('.btn-googlemap-169');\n                    var btn43 = form.find('.btn-googlemap-43');\n                    \n                    btn169.on('click', function (e) {\n                        e.preventDefault();\n                        $(this).addClass('btn-primary').removeClass('btn-default');\n                        btn43.removeClass('btn-primary').addClass('btn-default');\n                        keditor.getSettingComponent().find('.embed-responsive').removeClass('embed-responsive-4by3').addClass('embed-responsive-16by9');\n                        var comp = keditor.getSettingComponent();\n                        if (comp.attr('maptype') === 'manually') {\n                            if (comp.find('.kgooglemap').data('map')) {\n                                google.maps.event.trigger(comp.find('.kgooglemap').data('map'), \"resize\");\n                            }\n                        }\n                    });\n                    \n                    btn43.on('click', function (e) {\n                        e.preventDefault();\n                        $(this).addClass('btn-primary').removeClass('btn-default');\n                        btn169.removeClass('btn-primary').addClass('btn-default');\n                        keditor.getSettingComponent().find('.embed-responsive').removeClass('embed-responsive-16by9').addClass('embed-responsive-4by3');\n                        var comp = keditor.getSettingComponent();\n                        if (comp.attr('maptype') === 'manually') {\n                            if (comp.find('.kgooglemap').data('map')) {\n                                google.maps.event.trigger(comp.find('.kgooglemap').data('map'), \"resize\");\n                            }\n                        }\n                    });\n                }\n            });\n        },\n        showSettingForm: function (form, component, keditor) {\n            var self = this;\n            var maptype = component.attr('data-maptype');\n            var place = component.attr('data-place');\n            var ratio169 = component.find('.embed-responsive').hasClass('embed-responsive-16by9');\n            var ratio43 = component.find('.embed-responsive').hasClass('embed-responsive-4by3');\n            if (ratio43) {\n                form.find('.btn-googlemap-43').addClass('btn-primary').removeClass('btn-default');\n            }\n            if (ratio169) {\n                form.find('.btn-googlemap-169').addClass('btn-primary').removeClass('btn-default');\n            }\n            form.find('.mapType[value=' + maptype + ']').prop('checked', true);\n            var src = component.find('iframe').attr('src');\n            var iframe = '<iframe class=\"embed-responsive-item\" src=\"' + src + '\"></iframe>';\n            if (!place) {\n                place = 'Hanoi, Vietnam';\n            }\n            form.find('[name=mapAddress]').val(place);\n            form.find('[name=mapEmbedCode]').val(iframe);\n            var firstLoad = component.attr('data-firstLoad');\n            if (maptype === 'manually') {\n                form.find('.manually').removeClass('hide').siblings('.embed').addClass('hide');\n                \n                if (!firstLoad && place) {\n                    var i = setInterval(function () {\n                        if (window.googleMapInitialized) {\n                            clearInterval(i);\n                            self.initAutocomplete(component, form);\n                            setTimeout(function () {\n                                var input = form.find('[name=mapAddress]')[0];\n                                google.maps.event.trigger(input, 'focus')\n                                google.maps.event.trigger(input, 'keydown', {\n                                    keyCode: 13\n                                });\n                                component.attr('data-firstLoad', 'false');\n                            }, 1000);\n                        }\n                    }, 100);\n                }\n            } else {\n                form.find('.manually').addClass('hide').siblings('.embed').removeClass('hide');\n            }\n        },\n        \n        initAutocomplete: function (component, form) {\n            if (!window.googleMapInitialized) {\n                alert('google map is not initialized');\n                return;\n            }\n            var mapdiv = component.find('.kgooglemap')[0];\n            var map = new google.maps.Map(mapdiv, {\n                zoom: 13,\n                mapTypeId: 'roadmap'\n            });\n            // Create the search box and link it to the UI element.\n            var input = form.find('[name=mapAddress]')[0];\n            var searchBox = new google.maps.places.SearchBox(input);\n            //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n            \n            // Bias the SearchBox results towards current map's viewport.\n            map.addListener('bounds_changed', function () {\n                searchBox.setBounds(map.getBounds());\n            });\n            \n            var markers = [];\n            // Listen for the event fired when the user selects a prediction and retrieve\n            // more details for that place.\n            \n            searchBox.addListener('places_changed', function () {\n                var places = searchBox.getPlaces();\n                \n                if (places.length == 0) {\n                    return;\n                }\n                \n                // Clear out the old markers.\n                markers.forEach(function (marker) {\n                    marker.setMap(null);\n                });\n                markers = [];\n                // For each place, get the icon, name and location.\n                var bounds = new google.maps.LatLngBounds();\n                places.forEach(function (place) {\n                    if (!place.geometry) {\n                        console.log(\"Returned place contains no geometry\");\n                        return;\n                    }\n                    \n                    var icon = {\n                        url: place.icon,\n                        size: new google.maps.Size(71, 71),\n                        origin: new google.maps.Point(0, 0),\n                        anchor: new google.maps.Point(17, 34),\n                        scaledSize: new google.maps.Size(25, 25)\n                    };\n                    \n                    // Create a marker for each place.\n                    markers.push(new google.maps.Marker({\n                        map: map,\n                        icon: icon,\n                        title: place.name,\n                        position: place.geometry.location\n                    }));\n                    \n                    if (place.geometry.viewport) {\n                        // Only geocodes have viewport.\n                        bounds.union(place.geometry.viewport);\n                    } else {\n                        bounds.extend(place.geometry.location);\n                    }\n                });\n                map.fitBounds(bounds);\n                component.attr('data-place', input.value);\n            });\n            \n            component.find('.kgooglemap').data('map', map);\n        }\n    };\n    \n    window.initKeditorMapSetting = function () {\n        window.googleMapInitialized = true;\n    }\n})(jQuery);\n"]}