{"version":3,"sources":["keditor-component-googlemap-0.0.0.js"],"names":["$","KEditor","keditor","flog","log","components","init","contentArea","container","component","script","find","length","remove","removeAttr","place","attr","maptype","window","on","trigger","getContent","componentContent","children","html","settingEnabled","settingTitle","initSettingForm","form","self","this","ajax","url","type","dataType","success","resp","apiKey","mapjs","google","maps","places","append","mapTypes","hide","filter","value","show","getSettingComponent","iframe","kgooglemap","mapData","data","event","initAutocomplete","input","i","setInterval","clearInterval","keyCode","src","alert","removeClass","addClass","showSettingForm","ratio","hasClass","prop","val","firstLoad","googleMapInitialized","setTimeout","mapdiv","map","Map","zoom","mapTypeId","searchBox","SearchBox","addListener","setBounds","getBounds","markers","getPlaces","forEach","marker","setMap","bounds","LatLngBounds","geometry","console","icon","size","Size","origin","Point","anchor","scaledSize","push","Marker","title","name","position","location","viewport","union","extend","fitBounds","initKeditorMapSetting","jQuery"],"mappings":"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","file":"keditor-component-googlemap-0.0.0.min.js","sourcesContent":["/**\n * KEditor Google Map Component\n * @copyright: Kademi (http://kademi.co)\n * @author: Kademi (http://kademi.co)\n * @version: @{version}\n * @dependencies: $, $.fn.draggable, $.fn.droppable, $.fn.sortable, Bootstrap, FontAwesome (optional)\n */\n(function ($) {\n    var KEditor = $.keditor;\n    var flog = KEditor.log;\n    \n    KEditor.components['googlemap'] = {\n        init: function (contentArea, container, component, keditor) {\n            var script = component.find('script');\n            if (script.length) {\n                script.remove();\n            }\n            component.removeAttr('data-firstLoad');\n            var place = component.attr('data-place');\n            var maptype = component.attr('data-maptype');\n            if (place && maptype === 'manually') {\n                $(window).on('load', function () {\n                    component.find('.btn-component-setting').trigger('click');\n                });\n            }\n        },\n        \n        getContent: function (component, keditor) {\n            flog('getContent \"googlemap\" component', component);\n            \n            var componentContent = component.children('.keditor-component-content');\n            componentContent.find('.googlemap-cover').remove();\n            component.find('.kgooglemap').html('');\n            \n            return componentContent.html();\n        },\n        \n        settingEnabled: true,\n        \n        settingTitle: 'Google Map Settings',\n        \n        initSettingForm: function (form, keditor) {\n            flog('init \"googlemap\" settings', form);\n            var self = this;\n            \n            return $.ajax({\n                url: '/static/keditor/componentGoogleMapSettings.html',\n                type: 'get',\n                dataType: 'HTML',\n                success: function (resp) {\n                    var apiKey = 'AIzaSyBUcuZxwpBXCPztG7ot-rITXJbycPuS7gs';\n                    var mapjs = '<script src=\"https://maps.googleapis.com/maps/api/js?key=' + apiKey + '&callback=initKeditorMapSetting&libraries=places\" async defer></script>';\n                    if (window.google && window.google.maps && google.maps.places) {\n                        mapjs = '';\n                    }\n                    \n                    form.append(\n                        mapjs + resp\n                    );\n                    \n                    var mapTypes = form.find('.map-type');\n                    form.find('.mapType').on('click', function () {\n                        mapTypes.hide().filter('.' + this.value).show();\n                        \n                        var component = keditor.getSettingComponent();\n                        var iframe = component.find('iframe');\n                        var kgooglemap = component.find('.kgooglemap');\n                        component.attr('data-maptype', this.value);\n                        \n                        iframe[this.value === 'manually' ? 'hide' : 'show']();\n                        kgooglemap[this.value === 'manually' ? 'show' : 'hide']();\n                        \n                        if (this.value === 'manually') {\n                            var mapData = kgooglemap.data('map');\n                            \n                            if (mapData) {\n                                google.maps.event.trigger(mapData, 'resize');\n                            } else {\n                                self.initAutocomplete(component, form);\n                                var input = form.find('[name=mapAddress]')[0];\n                                \n                                var i = setInterval(function () {\n                                    if (mapData) {\n                                        clearInterval(i);\n                                        \n                                        google.maps.event.trigger(input, 'focus');\n                                        google.maps.event.trigger(input, 'keydown', {\n                                            keyCode: 13\n                                        });\n                                    }\n                                }, 100);\n                            }\n                        }\n                    });\n                    \n                    form.find('[name=mapEmbedCode]').on('change', function () {\n                        var iframe = $(this.value);\n                        var src = iframe.attr('src');\n                        if (iframe.length > 0 && src && src.length > 0) {\n                            keditor.getSettingComponent().find('.embed-responsive-item').attr('src', src);\n                        } else {\n                            alert('Your Google Map embed code is invalid!');\n                        }\n                    });\n                    \n                    form.find('[name=mapRatio]').on('click', function () {\n                        var component = keditor.getSettingComponent();\n                        \n                        component.find('.embed-responsive').removeClass('embed-responsive-4by3 embed-responsive-16by9').addClass('embed-responsive-' + this.value);\n                        \n                        if (component.attr('data-maptype') === 'manually') {\n                            var mapData = component.find('.kgooglemap').data('map');\n                            if (mapData) {\n                                google.maps.event.trigger(mapData, \"resize\");\n                            }\n                        }\n                    });\n                }\n            });\n        },\n        showSettingForm: function (form, component, keditor) {\n            var self = this;\n            \n            var maptype = component.attr('data-maptype') || 'embed';\n            var place = component.attr('data-place');\n            \n            var ratio = component.find('.embed-responsive').hasClass('embed-responsive-16by9') ? '16by9' : '4by3';\n            form.find('.mapRatio[value=' + ratio + ']').prop('checked', true);\n            form.find('.mapType[value=' + maptype + ']').prop('checked', true);\n            \n            var src = component.find('iframe').attr('src');\n            var iframe = '<iframe class=\"embed-responsive-item\" src=\"' + src + '\"></iframe>';\n            if (!place) {\n                place = 'Hanoi, Vietnam';\n            }\n            form.find('[name=mapAddress]').val(place);\n            form.find('[name=mapEmbedCode]').val(iframe);\n            \n            form.find('.map-type').hide().filter('.' + maptype).show();\n            \n            var firstLoad = component.attr('data-firstLoad');\n            if (maptype === 'manually') {\n                if (!firstLoad && place) {\n                    var i = setInterval(function () {\n                        if (window.googleMapInitialized) {\n                            clearInterval(i);\n                            self.initAutocomplete(component, form);\n                            setTimeout(function () {\n                                var input = form.find('[name=mapAddress]')[0];\n                                google.maps.event.trigger(input, 'focus')\n                                google.maps.event.trigger(input, 'keydown', {\n                                    keyCode: 13\n                                });\n                                component.attr('data-firstLoad', 'false');\n                            }, 1000);\n                        }\n                    }, 100);\n                }\n            }\n        },\n        \n        initAutocomplete: function (component, form) {\n            if (!window.googleMapInitialized) {\n                alert('google map is not initialized');\n                return;\n            }\n            \n            var mapdiv = component.find('.kgooglemap')[0];\n            var map = new google.maps.Map(mapdiv, {\n                zoom: 13,\n                mapTypeId: 'roadmap'\n            });\n            \n            // Create the search box and link it to the UI element.\n            var input = form.find('[name=mapAddress]')[0];\n            var searchBox = new google.maps.places.SearchBox(input);\n            //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n            \n            // Bias the SearchBox results towards current map's viewport.\n            map.addListener('bounds_changed', function () {\n                searchBox.setBounds(map.getBounds());\n            });\n            \n            var markers = [];\n            // Listen for the event fired when the user selects a prediction and retrieve\n            // more details for that place.\n            \n            searchBox.addListener('places_changed', function () {\n                var places = searchBox.getPlaces();\n                \n                if (places.length == 0) {\n                    return;\n                }\n                \n                // Clear out the old markers.\n                markers.forEach(function (marker) {\n                    marker.setMap(null);\n                });\n                markers = [];\n                // For each place, get the icon, name and location.\n                var bounds = new google.maps.LatLngBounds();\n                places.forEach(function (place) {\n                    if (!place.geometry) {\n                        console.log(\"Returned place contains no geometry\");\n                        return;\n                    }\n                    \n                    var icon = {\n                        url: place.icon,\n                        size: new google.maps.Size(71, 71),\n                        origin: new google.maps.Point(0, 0),\n                        anchor: new google.maps.Point(17, 34),\n                        scaledSize: new google.maps.Size(25, 25)\n                    };\n                    \n                    // Create a marker for each place.\n                    markers.push(new google.maps.Marker({\n                        map: map,\n                        icon: icon,\n                        title: place.name,\n                        position: place.geometry.location\n                    }));\n                    \n                    if (place.geometry.viewport) {\n                        // Only geocodes have viewport.\n                        bounds.union(place.geometry.viewport);\n                    } else {\n                        bounds.extend(place.geometry.location);\n                    }\n                });\n                map.fitBounds(bounds);\n                component.attr('data-place', input.value);\n            });\n            \n            component.find('.kgooglemap').data('map', map);\n        }\n    };\n    \n    window.initKeditorMapSetting = function () {\n        window.googleMapInitialized = true;\n    }\n    \n})(jQuery);\n"],"sourceRoot":"/source/"}